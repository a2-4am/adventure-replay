;license:MIT
;(c) 2024 by 4am
;
!cpu 6502
!to "build/LOADER.SYSTEM#FF2000",plain
*=$2000

; application-specific macros
!macro RWTS_FILENAMES {
side_a
         !byte 6
         !text "SIDE.A"
rwts_filenames
         !word side_a
}

; application-specific addresses
STAGE2                    = $9C00
PRODOS_BUFFER             = $B800    ; $400 bytes
PREFIX_BUFFER             = $BC00    ; $40 bytes
AUTO_BUFFER               = $BC00    ; $100 bytes (if non-interactive, persistent)
SAVEGAME                  = $BC00    ; max $100 bytes (if interactive, persistent)
RWTS                      = $BD00    ; max $100 bytes (persistent)
INPUT                     = $BE00    ; max $100 bytes (persistent)
AUTO_INPUT                = INPUT
AUTO_FILENAME             = $BEBF    ; $41 bytes (if non-interactive, persistent)
SAVE_INPUT_BUFFER         = $0228    ; $26 bytes (persistent, used by BetterLineInput)
WRAP_DRAWING              = $0330

         !src  "../common/src/loader.init.a"               ; must be first
                                                           ; exits via Stage1
         !src  "../common/src/loader.rwts.dos.shim.a"
         !src  "../common/src/loader.automateinput.line.a"
         !src  "../common/src/loader.betterinput.line.a"

move_wrap_drawing_start
!pseudopc WRAP_DRAWING {
         jsr   EnableAccelerator
         jsr   $7900
DisableAccelerator
EnableAccelerator=*+3
}
move_wrap_drawing_end
         !src  "../common/src/hw.accel.a"

Stage1
         ; copy RWTS DOS shim into place
         ; (includes CloseAllFiles routine, so must do this first)
         +INSTALL_RWTS_DOS_SHIM

         ; B600..B7FF from T00,S00..T00,S01
         jsr   PRODOS_MLI
         !byte CMD_OPEN
         !word parm_boot_open
         jsr   PRODOS_MLI
         !byte CMD_READ
         !word parm_boot_read
         ; 9D00..B4FF from T00,S0A..T02,S01
         jsr   PRODOS_MLI
         !byte CMD_SEEK
         !word parm_boot_seek
         lda   #$9D
         sta   parm_boot_read_addr_hi
         lda   #$17
         sta   parm_boot_read_len_hi
         jsr   PRODOS_MLI
         !byte CMD_READ
         !word parm_boot_read
         jsr   CloseAllFiles

         ; copy stage 2 loader code into place
         +SHORT_COPY move_stage2_start, move_stage2_end, STAGE2

         ; copy accelerated drawing wrapper into place
         +SHORT_COPY move_wrap_drawing_start, move_wrap_drawing_end, WRAP_DRAWING

         ; build EnableAccelerator and DisableAccelerator functions
         ; and copy them into place
         jsr   BuildAcceleratorFunction
         +STAY @accel+1
         dex
@accel   lda   SELF_MODIFIED_WORD, x
         sta   DisableAccelerator, x
         dex
         bpl   @accel

         lda   input_filename_start
         beq   @no_auto
         ; if we're using automation, install the AutomateInput hook.
         ; SIDE.A contains patch to call $BE00 instead of $FD6B for input
         +INSTALL_AUTOMATE_LINE_INPUT

         jmp   @goto_stage2

@no_auto
         ; if we're not using automation, install the BetterInput hook instead.
         ; SIDE.A contains patch to call $BE00 instead of $FD6B for input
         +INSTALL_BETTER_LINE_INPUT

@goto_stage2
         jmp   STAGE2

move_stage2_start
!pseudopc STAGE2 {
         +READ_ENTIRE_FILE parm_open2, parm_read2

         +STA_16 $5E04, WRAP_DRAWING

         ldx   #$60
         stx   $2B
         jmp   $B700

parm_open2
         !byte 3
         !word obj_filename2
         !word PRODOS_BUFFER
         !byte 0
parm_read2
         !byte 4
         !byte 1
         !word $0800
         !word $FFFF
         !word 0
obj_filename2
         !byte 9
         !text "ADVENTURE"
}
move_stage2_end

parm_boot_open
         !byte 3
         !word side_a
         !word PRODOS_BUFFER
         !byte 0
parm_boot_read
         !byte 4
         !byte 1
         !byte 0
parm_boot_read_addr_hi
         !byte $B6
         !byte 0
parm_boot_read_len_hi
         !byte $02
         !word 0
parm_boot_seek
         !byte 2
         !byte 1                     ; refnum (always 1)
         !byte 0                     ; seek offset lo (always 0)
parm_boot_seek_hi
         !byte $0A
parm_boot_seek_very_hi
         !byte 0
