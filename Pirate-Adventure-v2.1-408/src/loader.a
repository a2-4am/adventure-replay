;license:MIT
;(c) 2023 by 4am
;
!cpu 6502
!to "build/LOADER.SYSTEM#FF2000",plain
*=$2000

; application-specific macros
!macro RWTS_FILENAMES {
side_b
         !byte 6
         !text "SIDE.B"
rwts_filenames
         !word side_b
}

; application-specific addresses
PRODOS_BUFFER             = $B800    ; $400 bytes
STAGE2                    = $3000
PREFIX_BUFFER             = $BC00    ; $40 bytes
AUTO_BUFFER               = $BC00    ; $100 bytes (if non-interactive, persistent)
WRAP_SAVEGAME             = $BC00
SAVEGAME                  = $BC07    ; max $100 bytes (if interactive, persistent)
RWTS                      = $BD00    ; max $100 bytes (persistent)
INPUT                     = $BE00    ; max $100 bytes (persistent)
SAGA_LOCATION_ARRAY       = $6546
SAGA_IO_ERROR             = $FF58

         !src  "../common/src/loader.init.a"               ; must be first
                                                           ; exits via Stage1
         !src  "../common/src/loader.rwts.dos.shim.a"
         !src  "../common/src/loader.automate.input.a"
         !src  "../common/src/loader.better.input.a"
         !src  "../common/src/savegame.saga.a"
move_wrap_savegame_start
!pseudopc WRAP_SAVEGAME {
WrapOpenSaveFile
         jsr   OpenSaveFile
         lda   $4157
         rts
}
move_wrap_savegame_end

Stage1
         ; copy RWTS DOS shim into place
         ; (includes CloseAllFiles routine, so must do this first)
         +INSTALL_RWTS_DOS_SHIM

         ; copy savegame code into place
         +INSTALL_SAGA_SAVEGAME
         +SHORT_COPY move_wrap_savegame_start, move_wrap_savegame_end, WRAP_SAVEGAME

         ; 4000..7B2F
         +READ_ENTIRE_FILE parm_open1, parm_read1

         ; 8E00..B7FF
         ; This OBJ file includes DOS, minus RWTS, plus patches. Routines
         ; at $BFDC, $BFE6, and $BFED have been moved down
         ; to $B6DC, $B6E6, and $B6ED, and callers have been patched.
         +READ_ENTIRE_FILE parm_open2, parm_read2

         ; set up DOS I/O vectors (like calling $3EA, except we're not
         ; setting up the page 3 DOS vectors because we don't need to)
         jsr   $A851

         ; set up zero page (in the original game, these are set by calling
         ; HGR earlier in the boot process)
         lda   #$20
         sta   $E6
         lda   #$FF
         sta   $E7

         ; set up our custom reset vector
         +STA_16 $3F2, QuitToProDOS
         jsr   ROM_FINALIZE_RESET

         ; copy stage 2 loader code into place
         +SHORT_COPY move_stage2_start, move_stage2_end, STAGE2

         lda   input_filename_start
         ; stage 2 (now in place) needs to know if we're using automation
         sta   HasAutomationFile
         beq   @no_auto
         +INSTALL_AUTOMATE_INPUT
         beq   @goto_stage2          ; always branches
@no_auto
         +INSTALL_BETTER_INPUT
@goto_stage2
         ; continue from relocated stage 2
         jmp   STAGE2

parm_open1
         !byte 3
         !word obj_filename1
         !word PRODOS_BUFFER
         !byte 0
parm_read1
         !byte 4
         !byte 1
         !word $4000
         !word $FFFF
         !word 0
obj_filename1
         !byte 8
         !text "OBJ.4000"

parm_open2
         !byte 3
         !word obj_filename2
         !word PRODOS_BUFFER
         !byte 0
parm_read2
         !byte 4
         !byte 1
         !word $8E00
         !word $FFFF
         !word 0
obj_filename2
         !byte 8
         !text "OBJ.8E00"

;------------------------------------------------------------------------------
; Stage 2 loader
; loads rest of game code and applies patches
; exits to game, then never used again (memory region can be reused)
;------------------------------------------------------------------------------
move_stage2_start
!pseudopc STAGE2 {
         ; 0800..21E9
         +READ_ENTIRE_FILE parm_open3, parm_read3

; these changes have been made in the OBJ files directly
!if 0 {
         ; shorten prompt
         lda   #$3E
         sta   $7357
         lda   #$20
         sta   $7358
         lda   #$00
         sta   $7359

         ; always continue after returning from custom input routine
         lda   #$00
         sta   $6FDF

         ; and change save prompt
         ldx   #0
-        lda   new_save_prompt, x
         sta   $15C3, x
         beq   +
         inx
         bne   -                     ; always branches
+
         ; and increase save slots
         lda   #$31
         sta   $15E9
         lda   #$D2
         sta   $15F0

         ; savegame hooks change some JSRs to direct calls
         ; instead of routines that take parameters on the stack,
         ; so NOP out the parameters
         ; (putting this in OBJ file because they're not dependent
         ; on source addresses, and stage 2 code is getting too big)
         lda   #$EA
         sta   $74CE
         sta   $74CF
         sta   $7515
         sta   $7516
}

         ; turn on lowercase display by default on machines that support it
         +HAS_LOWERCASE
         bne   +
         lda   #$00
         sta   $698C
+
HasAutomationFile=*+1
         lda   #SELF_MODIFIED_BYTE
         beq   @no_auto

         ; if we're using automation, install the AutomateInput hook
         +MAKE_JSR $6FDB, AutomateInput
         ; and bypass title screen / restore game / voice slot
         +MAKE_JMP $6AA7, $6ACA
         ; and bypass text intro screen
         lda   #$2C
         sta   $6AD2
         ; and de-randomize with monotonically increasing random values
         lda   #$A9                  ; LDA #$00
         sta   $0F9C
         lda   #$00
         sta   $0F9D
         lda   #$EE                  ; INC $0F9D (value of LDA)
         sta   $0F9E
         lda   #$9D
         sta   $0F9F
         lda   #$0F
         sta   $0FA0
         jmp   @start_game

@no_auto
         ; if we're not using automation, install the BetterInput hook instead
         +MAKE_JSR $6FDB, BlockingBetterInput

         ; and hook save and restore routines
         +STA_16 $1536, PrintSavedGames
         +STA_16 $15E0, PrintSavedGames
         +MAKE_JSR $153B, WrapOpenSaveFile
         +STA_16 $74CC, OpenSaveFile
         +STA_16 $156F, SavePart1
         +STA_16 $1590, SavePart2
         +STA_16 $74E8, RestorePart1
         +STA_16 $7513, RestorePart2

@start_game
         jmp   $0800

; these changes have been made in the OBJ files directly
!if 0 {
new_save_prompt
         !text "GAME NUMBER (1-9)? ",0
}

parm_open3
         !byte 3
         !word obj_filename3
         !word PRODOS_BUFFER
         !byte 0
parm_read3
         !byte 4
         !byte 1
         !word $0800
         !word $FFFF
         !word 0
obj_filename3
         !byte 8
         !text "OBJ.0800"
}
move_stage2_end
