!if rwts_mode = 1 {
  !if swap_zp = 1 {
                sta     zp_array + namhi - first_zp
                sty     zp_array + namlo - first_zp
                jsr     swap_zpg
  } else { ;swap_zp = 0
                sta     namhi
                sty     namlo
  } ;swap_zp = 1

loopsect
  !if ver_02 = 1 {
                lda     #0
                sta     sizehi
  } else { ;ver_02
                stz     sizehi
  } ;ver_02 = 1
  !if enable_format = 1 {
                ldy     #$0c ;command
                lda     (namlo),y
                cmp     #2 ;write (or format if greater)
                php
                bcc     skipinit ;read
                beq     skipinit ;write
                ldy     #5 ;sector
    !if ver_02 = 1 {
                txa
    } else { ;ver_02
                lda     #0
    } ;ver_02 = 1
                sta     (namlo),y
                dey ;track
                sta     (namlo),y
skipinit
  } ;enable_format = 1
  !if allow_multi = 1 {
                ldy     #3 ;volume
                lda     (namlo),y
    !if allow_zerovol = 1 {
                bne     +
lastvol = * + 1
                lda     #D1S1
+               sta     lastvol
    } ;allow_zerovol = 1
                ldy     #$0e ;returned volume
                sta     (namlo),y
                ldx     #vollist_e-vollist_b
-               dex
                cmp     vollist_b,x
                bne     -
  } ;allow_multi = 1
                ldy     #4 ;track
                lda     (namlo),y
                asl
                asl
                asl
                rol     sizehi
                asl
                rol     sizehi
                iny ;sector
                ora     (namlo),y
  !if allow_multi = 1 {
                ldy     sizehi
-               dex
                bmi     ++
                clc
                adc     #$30
                bcc     +
                iny
+               iny
                iny
                bne     -
++
  } ;allow_multi = 1
  !if allow_trees = 1 {
                tax
    !if allow_multi = 1 {
                tya
    } else { ;allow_multi = 0
                lda     sizehi
    } ;allow_multi = 1
                lsr
                sta     treeidx
                txa
  } else { ;allow_trees = 0
                lsr     sizehi
  } ;allow_trees = 1
                ror
                php
                jsr     seek1
                plp
  !if fast_subindex = 0 {
                lda     #>hddencbuf
                adc     #0
                sta     adrhi
  } else { ;fast_subindex = 1
                bcc     +
                inc     adrhi
+
  } ;fast_subindex = 0
                ldy     #9 ;adrhi
                lda     (namlo),y
                sta     scratchhi
                dey ;adrlo
                lda     (namlo),y
                sta     scratchlo
  !if enable_format = 1 {
                ldy     #0
                ldx     #0
                plp
                bcs     runinit
  } else { ;enable_format = 0
    !if enable_write = 1 {
                ldy     #$0c ;command
                lda     (namlo),y
      !if enable_seek = 1 {
        !if swap_zp = 0 {
                beq     +
        } else { ;swap_zp = 1
                beq     swap_zpg
        } ;swap_zp = 0
      } ;enable_seek
                ldy     #0
                lsr
                bne     runinit
    } else { ;enable_write = 0
                ldy     #0
    } ;enable_write = 1
  } ;enable_format = 1

-               lda     (adrlo),y
                sta     (scratchlo),y
                iny
;;                cpy     $BE3D ;partial-sector support
                bne     -
  !if swap_zp = 0 {
+               clc
                rts
  } else { ;swap_zp = 1
    !if enable_write = 1 {
                beq     swap_zpg
    } ;enable_write = 1
  } ;swap_zp = 0

  !if enable_write = 1 {
runinit
    !if enable_format = 1 {
                bne     format
    } ;enable_format = 1
    !if write_sparse = 1 {
                lda     sparseblk
                beq     writesparse
    } ;write_sparse = 1
-               lda     (scratchlo),y
                sta     (adrlo),y
                iny
                bne     -
    !if write_sparse = 0 {
                lda     #>hddencbuf
                sta     adrhi
                ldy     #cmdwrite
unrcommand1 = unrelochdd + (* - reloc)
                sty     command
      !if use_smartport = 1 {
                nop ;allow replacing "sty command" with "sty pcommand" in extended SmartPort mode
      } ;use_smartport = 1
      !if swap_zp = 1 {
                jsr     hddwriteimm
        !if enable_format = 1 {
                bcc     swap_zpg ;always
        } ;enable_format = 1
      } else { ;swap_zp = 0
                jmp     hddwriteimm
      } ;swap_zp = 1
      !if enable_format = 1 {
clrcarry        clc
                inc     adrhi
format          lda     blanksec,x
                sta     (adrlo),y
                inx
                txa
                and     #7
                tax
                iny
                bne     format
                bcs     clrcarry
                dex
                stx     lasttree
                iny
                lda     #$18 ;blocks
                sta     namlo
                sty     namhi
                lda     #>hddencbuf
                sta     adrhi
                lda     #cmdwrite
                sta     reqcmd
                inc     lastblk ;force mismatch
-               jsr     hddrdwrloop
                inc     blkidx
                bne     +
                inc     treeidx
+               dec     namlo
                bne     -
                dec     namhi
                bpl     -
      } ;enable_format = 1
    } else { ;write_sparse = 1
      !if swap_zp = 1 {
                jsr     hddwriteenc
      } else { ;swap_zp = 0
                jmp     hddwriteenc
      } ;swap_zp = 1
    } ;write_sparse = 0
  } ;enable_write = 1

  !if swap_zp = 1 {
swap_zpg        ldx     #(last_zp - first_zp)
-               lda     first_zp,x
                ldy     zp_array,x
                sta     zp_array,x
                sty     first_zp,x
                dex
                bpl     -
  } ;swap_zp = 1

  !if (enable_write + swap_zp) > 0 {
                clc
                rts
  } ;enable_write = 1 or swap_zp = 1

  !if enable_format = 1 {
blanksec        !text   "SAN INC."
  } ;enable_format = 1

  !if write_sparse = 1 {
writesparse     ldx     #2
                tya
    !if fast_subindex = 0 {
                jsr     hddreaddirsec
    } else { ;fast_subindex = 1
                ldy     #>hddencbuf
                jsr     hddreaddirsect
    } ;fast_subindex = 0
    !if ver_02 = 1 {
                lda     #0
                sta     sizelo
                sta     sizehi
    } else { ;ver_02 = 0
                stz     sizelo
                stz     sizehi
    } ;ver_02 = 1

                ;round up to block count

                lda     hddencbuf + $29
                adc     #$ff
                lda     hddencbuf + $2A
                adc     #1
                lsr
                sta     ldrhi
                ldx     hddencbuf + $27
                lda     hddencbuf + $28
---             ldy     #>hddencbuf
                sty     adrhi
                jsr     hddseekrd
                ldy     #0

                ;scan for a free block

--              lda     #$80
                sta     ldrlo
-               lda     (adrlo), y
                and     ldrlo
                bne     foundbit
                inc     sizelo
                lsr     ldrlo
                bcc     -
                lda     sizelo
                bne     +
                inc     sizehi
+               iny
                bne     --
                inc     adrhi
                lda     adrhi
                cmp     #(>hddencbuf) + 2
                bne     --
unrbloklo2 = unrelochdd + (* - reloc)
                ldx     bloklo
    !if use_smartport = 1 {
                nop ;allow replacing "ldx bloklo" with "ldx pblock" in extended SmartPort mode
    } ;use_smartport = 1

                inx
                bne     +
unrblokhi2 = unrelochdd + (* - reloc)
                inc     blokhi
    !if use_smartport = 1 {
                nop ;allow replacing "inc blokhi" with "inc pblock + 1" in extended SmartPort mode
    } ;use_smartport = 1
+
unrblokhi3 = unrelochdd + (* - reloc)
                lda     blokhi
    !if use_smartport = 1 {
                nop ;allow replacing "lda blokhi" with "lda pblock + 1" in extended SmartPort mode
    } ;use_smartport = 1
                dec     ldrhi
                bne     ---

                ;disk full

    !if swap_zp = 0 {
                clc
                rts
    } else { ;swap_zp = 1
                beq     swap_zpg
    } ;swap_zp = 0

                ;allocate block and update bitmap

foundbit        lda     (adrlo), y
                eor     ldrlo
                sta     (adrlo), y
                jsr     hddwriteenc
                inc     lasttree
                lda     #$60 ;RTS
                sta     hddskiptree + 2
                jsr     hddrdfile
                lda     #$be ;LDX ,Y
                sta     hddskiptree + 2
                lda     sizelo
                sta     hdddirbuf, y
                lda     sizehi
                sta     hdddirbuf + 256, y
                jsr     hddwritedir
                lda     #0
                jsr     savebyte
                ldx     sizelo
                lda     sizehi
                ldy     #cmdwrite
                jsr     hddseekrdwr
                jmp     loopsect

hddwriteenc     lda     #>hddencbuf
                sta     adrhi
hddwritedir     ldy     #cmdwrite

unrcommand1 = unrelochdd + (* - reloc)
                sty     command
    !if use_smartport = 1 {
                nop ;allow replacing "sty command" with "sty pcommand" in extended SmartPort mode
    } ;use_smartport = 1
                bne     hddwriteimm
  } ;write_sparse = 1

seek1           sta     blkidx
  !if enable_write = 1 {
                ldy     #cmdread
                sty     reqcmd
  } ;enable_write = 1
} else { ;rwts_mode = 0
  !if (enable_readseq + allow_subdir) > 0 {
hddrdwrpart     jmp     hddrdwrfile
  } ;enable_readseq = 1 or allow_subdir = 1

                ;read volume directory key block
                ;self-modified by init code

hddopendir
		jsr	saveslot

unrhddblocklo = unrelochdd + (* - reloc)
                ldx     #2
unrhddblockhi = unrelochdd + (* - reloc)
                lda     #0
                jsr     hddreaddirsel

hddreaddir
  !if might_exist = 1 {
                lda     hdddirbuf + FILE_COUNT ;assuming only 256 files per subdirectory
                sta     entries
    !if many_files = 1 {
                lda     hdddirbuf + FILE_COUNT + 1
                sta     entrieshi
    } ;many_files = 1
  } ;might_exist = 1

                lda     #NAME_LENGTH + ENTRY_SIZE
hddfirstent     sta     scratchlo
                lda     #>(hdddirbuf - 1)
                sta     scratchhi

                ;there can be only one page crossed, so we can increment here

hddnextent1     inc     scratchhi
hddnextent      ldy     #0
  !if (might_exist + allow_subdir + allow_saplings + (allow_trees xor always_trees)) > 0 {
                lda     (scratchlo), y
    !if might_exist = 1 {
                sty     status

                ;skip deleted entries without counting

                and     #MASK_ALL
                beq     +
    } ;might_exist = 1

    !if (allow_subdir + allow_saplings + (allow_trees xor always_trees)) > 0 {
                ;remember type
                ;now bits 5-4 are represented by carry (subdirectory), sign (sapling)

                asl
                asl

      !if allow_trees = 1 {
                ;now bits 5-3 are represented by carry (subdirectory), sign (sapling),
                ;overflow (seedling), and sign+overflow (tree)

                sta     treeidx
                bit     treeidx
      } ;allow_trees = 1
                php
    } ;allow_subdir = 1 or allow_saplings = 1 or (allow_trees = 1 and always_trees = 0)
  } ;might_exist = 1 or allow_subdir = 1 or allow_saplings = 1 or (allow_trees = 1 and always_trees = 0)

                ;match name lengths before attempting to match names

                lda     (scratchlo), y
                and     #$0f
                tax
                inx
-               cmp     (namlo), y
                beq     hddfoundname

                ;match failed, check if any directory entries remain

  !if (allow_subdir + allow_saplings + (allow_trees xor always_trees)) > 0 {
                plp
  } ;allow_subdir = 1 or allow_saplings = 1 or (allow_trees = 1 and always_trees = 0)
  !if might_exist = 1 {
                dec     entries
                bne     +
    !if many_files = 1 {
                lda     entrieshi
                bne     ++
    } ;many_files = 1
                inc     status
                rts

    !if many_files = 1 {
++              dec     entrieshi
    } ;many_files = 1
  } ;might_exist = 1

                ;move to next entry in this block, if possible

+               clc
                lda     scratchlo
                adc     #ENTRY_SIZE
                sta     scratchlo
                bcs     hddnextent1
                cmp     #<(NAME_LENGTH + ($27 * $0d))
                bne     hddnextent

                ;read next directory block when we reach the end of this block

                ldx     hdddirbuf + NEXT_BLOCK_LO
                lda     hdddirbuf + NEXT_BLOCK_HI
                jsr     hddreaddirsec
                lda     #NAME_LENGTH
                bne     hddfirstent

hddfoundname    iny
                lda     (scratchlo), y
                dex
                bne     -

                ;initialise essential variables

  !if allow_trees = 1 {
                stx     treeidx
    !if always_trees = 0 {
                stx     istree
    } ;always_trees = 0
  } ;allow_trees = 1
                stx     blkidx
  !if (aligned_read + one_shot) = 0 {
                stx     blkofflo
                stx     blkoffhi
  } ;aligned_read = 0 and one_shot = 0
  !if enable_write = 1 {
    !if aligned_read = 0 {
                ldy     reqcmd
                cpy     #cmdwrite ;control carry instead of zero
      !if one_shot = 0 {
                bne     +
      } ;one_shot = 0
    } ;aligned_read = 0
    !if one_shot = 0 {
      !if aligned_read = 0 {
                stx     sizelo
        !if bounds_check = 1 {
                sec
        } ;bounds_check = 1
      } ;aligned_read = 0
    } ;one_shot = 0
+
  } ;enable_write = 1

  !if (bounds_check + return_size + one_shot) > 0 {
                ;cache EOF (file size, loaded backwards)

                ldy     #EOF_HI
                lda     (scratchlo), y
    !if (enable_write + aligned_read) > 0 {
                tax
                dey ;EOF_LO
                lda     (scratchlo), y

                ;round file size up to nearest block if writing without aligned reads
                ;or always if using aligned reads

      !if aligned_read = 0 {
                bcc     +
      } else { ;aligned_read = 1
        !if (enable_write + (one_shot xor 1)) > 1 {
                sec
        } ;enable_write = 1 and one_shot = 0
      } ;aligned_read = 0
                adc     #$fe
                txa
                adc     #1
                and     #$fe
      !if aligned_read = 0 {
                tax
                lda     #0
        !if one_shot = 0 {
+               stx     blefthi
                sta     bleftlo
        } else { ;one_shot = 1
+               stx     sizehi
                sta     sizelo
        } ;one_shot = 0
      } else { ;aligned_read = 1
        !if one_shot = 0 {
                sta     blefthi
        } else { ;one_shot = 1
                sta     sizehi
        } ;one_shot = 0
      } ;aligned_read = 0
    } else { ;enable_write = 0 and aligned_read = 0
      !if one_shot = 0 {
                sta     blefthi
      } else { ;one_shot = 1
                sta     sizehi
      } ;one_shot = 0
                dey ;EOF_LO
                lda     (scratchlo), y
      !if one_shot = 0 {
                sta     bleftlo
      } else { ;one_shot = 1
                sta     sizelo
      } ;one_shot = 0
    } ;enable_write = 1 or aligned_read = 1
  } ;bounds_check = 1 or return_size = 1 or one_shot = 1

                ;cache AUX_TYPE (load offset for binary files)

  !if override_adr = 0 {
                ldy     #AUX_TYPE
                lda     (scratchlo), y
    !if (allow_subdir + allow_saplings + allow_trees + (aligned_read xor 1)) > 0 {
                sta     ldrlo
                iny
                lda     (scratchlo), y
                sta     ldrhi
    } else { ;allow_subdir = 0 and allow_saplings = 0 and allow_trees = 0 and aligned_read = 1
                pha
                iny
                lda     (scratchlo), y
                pha
    } ;allow_subdir = 1 or allow_saplings = 1 or allow_trees = 1 or aligned_read = 0
  } ;override_adr = 0

                ;cache KEY_POINTER

                ldy     #KEY_POINTER
                lda     (scratchlo), y
                tax
  !if (allow_subdir + allow_saplings + allow_trees) > 0 {
                sta     hdddirbuf
    !if (allow_trees + (fast_trees xor 1)) > 1 {
                sta     treeblklo
    } ;allow_trees = 1 and fast_trees = 0
                iny
                lda     (scratchlo), y
                sta     hdddirbuf + 256
    !if (allow_trees + (fast_trees xor 1)) > 1 {
                sta     treeblkhi
    } ;allow_trees = 1 and fast_trees = 0

    !if (allow_saplings + allow_sparse) > 1 {
                ;clear dirbuf in case sparse seedling is sapling-sized

                pha
                ldy     #1
                lda     #0
-               sta     hdddirbuf, y
                sta     hdddirbuf + 256, y
                iny
                bne     -
                pla
    } ;allow_saplings = 1 and allow_sparse = 1

    !if always_trees = 0 {
                plp
                bpl     ++
      !if allow_subdir = 1 {
                php
      } ;allow_subdir = 1
      !if allow_trees = 1 {
                ldy     #>hdddirbuf
                bvc     +
        !if fast_trees = 1 {
                ldy     #>hddtreebuf
        } ;fast_trees = 1
                sty     istree
+
      } ;allow_trees = 1
    } else { ;always_trees = 1
                ldy     #>hddtreebuf
    } ;always_trees = 0
  } else { ;allow_subdir = 0 and allow_saplings = 0 and allow_trees = 0
                iny
                lda     (scratchlo), y
  } ;allow_subdir = 1 or allow_saplings = 1 or allow_trees = 1

                ;read index block in case of sapling or tree

                jsr     hddreaddirsect

  !if allow_subdir = 1 {
                plp
                !byte  $24 ;mask the clc that follows
  } else { ;allow_subdir = 0
++
  } ;allow_subdir = 1
} ;rwts_mode = 1

hddrdfile
hddrdwrfile
!if allow_subdir = 1 {
                clc
++
} ;allow_subdir = 1

hddrdwrfilei
!if rwts_mode = 0 {
  !if (override_adr + allow_subdir + allow_saplings + allow_trees + (aligned_read xor 1)) > 0 {
                ;restore load offset

                ldx     ldrhi
                lda     ldrlo
    !if allow_subdir = 1 {
                ;check file type and fake size and load address for subdirectories

                bcc     +
                ldy     #2
                sty     sizehi
                ldx     #>hdddirbuf
                lda     #0
      !if aligned_read = 0 {
                sta     sizelo
      } ;aligned_read = 0
+
    } ;allow_subdir = 1
                sta     adrlo
                stx     adrhi
  } else { ;override_adr = 0 and allow_subdir = 0 and allow_saplings = 0 and allow_trees = 0 and aligned_read = 1
                pla
                sta     adrhi
                pla
                sta     adrlo
  } ;override_adr = 1 or allow_subdir = 1 or allow_saplings = 1 or allow_trees = 1 or aligned_read = 0

                ;set requested size to min(length, requested size)

  !if aligned_read = 0 {
    !if bounds_check = 1 {
                ldy     bleftlo
                cpy     sizelo
                lda     blefthi
                tax
                sbc     sizehi
                bcs     hddcopyblock
                sty     sizelo
                stx     sizehi
    } ;bounds_check = 1

hddcopyblock
    !if allow_aux = 1 {
                ldx     auxreq
                jsr     hddsetaux
    } ;allow_aux = 1
    !if one_shot = 0 {
      !if enable_write = 1 {
                lda     reqcmd
                lsr
                bne     hddrdwrloop
      } ;enable_write = 1

                ;if offset is non-zero then we return from cache

                lda     blkofflo
                tax
                ora     blkoffhi
                beq     hddrdwrloop
                lda     sizehi
                pha
                lda     sizelo
                pha
                lda     adrhi
                sta     scratchhi
                lda     adrlo
                sta     scratchlo
                stx     adrlo
                lda     #>hddencbuf
                clc
                adc     blkoffhi
                sta     adrhi

                ;determine bytes left in block

                lda     #1
                sbc     blkofflo
                tay
                lda     #2
                sbc     blkoffhi
                tax

                ;set requested size to min(bytes left, requested size)

                cpy     sizelo
                sbc     sizehi
                bcs     +
                sty     sizelo
                stx     sizehi
+
      !if enable_seek = 1 {
                lda     sizehi
        !if read_scrn = 1 {
                clv
        } ;read_scrn = 1
      } else { ;enable_seek = 0
                ldy     sizehi
      } ;enable_seek = 1
                jsr     hddcopycache

                ;align to next block and resume read

                lda     ldrlo
                adc     sizelo
                sta     ldrlo
                lda     ldrhi
                adc     sizehi
                sta     ldrhi
                sec
                pla
                sbc     sizelo
                sta     sizelo
                pla
                sbc     sizehi
                sta     sizehi
                ora     sizelo
      !if allow_subdir = 1 {
                bne     hddrdwrfile
      } else { ;allow_subdir = 0
                bne     hddrdwrfilei
      } ;allow_subdir = 1
      !if no_interrupts = 1 {
                clc
      } ;no_interrupts = 1
      !if allow_aux = 0 {
                rts
      } else { ;allow_aux = 1
                beq     hddrdwrdone
      } ;allow_aux = 0
    } ;one_shot = 0
  } else { ;aligned_read = 1
    !if bounds_check = 1 {
                lda     blefthi
                cmp     sizehi
                bcs     +
                sta     sizehi
+
    } ;bounds_check = 1
    !if allow_aux = 1 {
                ldx     auxreq
                jsr     hddsetaux
    } ;allow_aux = 1
  } ;aligned_read = 0
} ;rwts_mode = 0

hddrdwrloop
!if (aligned_read + rwts_mode) = 0 {
  !if (enable_write + enable_seek) > 0 {
                ldx     reqcmd
  } ;enable_write = 1 or enable_seek = 1

                ;set read/write size to min(length, $200)

                lda     sizehi
                cmp     #2
  !if read_scrn = 1 {
                clv
                bcc     redirect
    !if (enable_write + enable_seek) > 0 {
                txa
                beq     +
    } ;enable_write = 1 or enable_seek = 1
                ldy     ldrhi
                cpy     #8
                bcs     +
                bit     knownrts ;set O flag
                lda     sizehi
                pha
                lda     sizelo
                pha
                lda     #0
                sta     sizelo
                lda     #1

redirect
  } else { ;read_scrn = 0
                bcs     +
  } ;read_scrn = 1
                pha

                ;redirect read to private buffer for partial copy

                lda     adrhi
                pha
                lda     adrlo
                pha
                lda     #>hddencbuf
                sta     adrhi
  !if ver_02 = 1 {
                ldx     #0
                stx     adrlo
    !if (enable_write + enable_seek) > 0 {
                inx ;ldx #cmdread
    } ;enable_write = 1 or enable_seek = 1
  } else { ;ver_02 = 0
                stz     adrlo
    !if (enable_write + enable_seek) > 0 {
                ldx     #cmdread
    } ;enable_write = 1 or enable_seek = 1
  } ;ver_02 = 1
+
} ;aligned_read = 0 and rwts_mode = 0

!if allow_trees = 1 {
                ;read tree data block only if tree and not read already
                ;the indication of having read already is that at least one sapling/seed block entry has been read, too

  !if rwts_mode = 0 {
                ldy     blkidx
                bne     +
    !if always_trees = 0 {
                lda     istree
                beq     +
    } ;always_trees = 0
                lda     adrhi
                pha
                lda     adrlo
                pha
    !if ((aligned_read xor 1) + (enable_write or enable_seek)) > 1 {
      !if ver_02 = 1 {
                txa
                pha
      } else { ;ver_02 = 0
                phx
      } ;ver_02 = 1
    } ;aligned_read = 0 and (enable_write = 1 or enable_seek = 1)
    !if aligned_read = 0 {
                php
    } ;aligned_read = 0
  } else { ;rwts_mode = 1
    !if fast_subindex = 0 {
                ;read whenever block index changes

      !if mem_swap = 0 {
                cmp     lastblk
                sta     lastblk
      } else { ;mem_swap = 1
blkidx = * + 1
                ldy     #$d1
lastblk = * + 1
                cpy     #$d1
                sty     lastblk
      } ;mem_swap = 0
                php
                pla
      !if mem_swap = 0 {
                ;read whenever tree index changes

                ldy     treeidx
                cpy     lasttree
      } else { ;mem_swap = 1
treeidx = * + 1
                ldy     #$d1
lasttree = * + 1
                cpy     #$d1
      } ;mem_swap = 0
    
                sty     lasttree
                bne     readtree
                pha
                plp
      !if enable_write = 1 {
                bne     readtree
                lda     reqcmd
                lsr
      } ;enable_write = 1
                beq     skipblk

readtree
    } else { ;fast_subindex = 1
                ;read whenever tree index changes

      !if mem_swap = 0 {
                ldy     treeidx
                cpy     lasttree
                beq     hddskiptree
                sty     lasttree
                ldx     blkidx
      } else { ;mem_swap = 1
treeidx = * + 1
                ldy     #$d1
lasttree = * + 1
                cpy     #$d1
                beq     hddskiptree
                sty     lasttree
blkidx = * + 1
                ldx     #$d1
      } ;mem_swap = 0
                inx
                stx     lastblk
    } ;fast_subindex = 0
  } ;rwts_mode = 0

                ;fetch tree data block and read it

  !if fast_trees = 0 {
                ldx     treeblklo
                lda     treeblkhi
                jsr     hddreaddirsel
                ldy     treeidx
    !if rwts_mode = 0 {
                inc     treeidx
    } ;rwts_mode = 0
                ldx     hdddirbuf, y
                lda     hdddirbuf + 256, y
  } else { ;fast_trees = 1
                ldy     treeidx
    !if rwts_mode = 0 {
                inc     treeidx
    } ;rwts_mode = 0
                ldx     hddtreebuf, y
                lda     hddtreebuf + 256, y
  } ;fast_trees = 0
  !if detect_treof = 1 {
                bne     hddnoteof1
                tay
                txa
                bne     hddfixy1
    !if aligned_read = 0 {
                plp
                bcs     hddfewpop
                pla
                pla
                pla
hddfewpop
    } ;aligned_read = 0
                pla
                pla
                sec
                rts
hddfixy1        tya
hddnoteof1
  } ;detect_treof = 1

  !if fast_trees = 0 {
                jsr     hddseekrd
  } else { ;fast_trees = 1
                jsr     hddreaddirsel
  } ;fast_trees = 0

  !if rwts_mode = 0 {
    !if aligned_read = 0 {
                plp
    } ;aligned_read = 0
    !if ((aligned_read xor 1) + (enable_write or enable_seek)) > 1 {
      !if ver_02 = 1 {
                pla
                tax
      } else { ;ver_02 = 0
                plx
      } ;ver_02 = 1
    } ;aligned_read = 0 and (enable_write = 1 or enable_seek = 1)
                pla
                sta     adrlo
                pla
                sta     adrhi
  } ;rwts_mode = 0
} ;allow_trees = 1

                ;fetch data block and read/write it

hddskiptree     ldy     blkidx
!if rwts_mode = 0 {
+               inc     blkidx
  !if aligned_read = 0 {
    !if enable_seek = 1 {
                txa ;cpx #cmdseek, but that would require php at top
                beq     +
    } ;enable_seek = 1
    !if enable_write = 1 {
unrcommand2 = unrelochdd + (* - reloc)
                stx     command
      !if use_smartport = 1 {
                nop ;allow replacing "stx command" with "stx pcommand" in extended SmartPort mode
      } ;use_smartport = 1
    } ;enable_write = 1
  } ;aligned_read = 0
} else { ;rwts_mode = 1
  !if fast_subindex = 1 {
                lda     #>hddencbuf
                sta     adrhi

                ;read whenever block index changes

    !if mem_swap = 0 {
                cpy     lastblk
    } else { ;mem_swap = 1
lastblk = * + 1
                cpy     #$d1
    } ;mem_swap = 0
    !if enable_write = 0 {
                beq     skipblk
    } else { ;enable_write = 1
                bne     +
                lda     reqcmd
                lsr
                beq     skipblk
+
    } ;enable_write = 0
                sty     lastblk
  } ;fast_subindex = 1
} ;rwts_mode = 0
                ldx     hdddirbuf, y
                lda     hdddirbuf + 256, y
!if detect_treof = 1 {
                bne     hddnoteof2
                tay
                txa
                bne     hddfixy2
                sec
                rts
hddfixy2        tya
hddnoteof2
} ;detect_treof = 1
!if allow_sparse = 0 {
  !if rwts_mode = 1 {
    !if enable_write = 0 {
                jmp     hddseekrd
    } else { ;enable_write = 1
                ldy     reqcmd
      !if enable_seek = 1 {
                jmp     hddseekrdwr
      } else { ;enable_seek = 0
                bne     hddseekrdwr
      } ;enable_seek = 1
    } ;enable_write = 0
  } ;rwts_mode = 1
} else { ;allow_sparse = 1
                pha
                ora     hdddirbuf, y
  !if write_sparse = 1 {
                sta     sparseblk
  } ;write_sparse = 1
  !if rwts_mode = 1 {
    !if enable_write = 1 {
                cmp     #1
                pla
                ldy     reqcmd
                bcs     hddseekrdwr
savebyte
                tay
    } else { ;enable_write = 0
                tay
                pla
                dey
                iny ;don't affect carry
                bne     hddseekrd
    } ;enable_write = 1
  } ;rwts_mode = 1
} ;allow_sparse = 0
!if rwts_mode = 0 {
  !if allow_sparse = 1 {
                beq     hddissparse
                pla
  } ;allow_sparse = 1
  !if (aligned_read and (enable_write or enable_seek)) = 1 {
                ldy     reqcmd
    !if enable_seek = 1 {
                beq     +
    } ;enable_seek = 1
  } ;aligned_read = 1 and (enable_write = 1 or enable_seek = 1)
  !if aligned_read = 0 {
                php
  } ;aligned_read = 0
  !if enable_write = 1 {
                jsr     hddseekrdwr
  } else { ;enable_write = 0
                jsr     hddseekrd
  } ;enable_write = 1
  !if aligned_read = 0 {
                plp
  } ;aligned_read = 0

hddresparse
  !if aligned_read = 0 {
+               bcc     +
  } ;aligned_read = 0
                inc     adrhi
                inc     adrhi
  !if aligned_read = 0 {
resumescrn
    !if bounds_check = 1 {
                dec     blefthi
                dec     blefthi
    } ;bounds_check = 1
  } ;aligned_read = 0
                dec     sizehi
                dec     sizehi
                bne     hddrdwrloop
  !if aligned_read = 0 {
                lda     sizelo
                bne     hddrdwrloop
  } ;aligned_read = 0
hddrdwrdone
  !if allow_aux = 1 {
                ldx     #0
hddsetaux       sta     CLRAUXRD, x
                sta     CLRAUXWR, x
  } ;allow_aux = 1
!if swap_scrn = 1 {
saveslot
                lda     #4
                sta     $49
                ldx     #0
                stx     $48
                sta     $4a
--              ldy     #$78
-               lda     ($48), y
                pha
                lda     scrn_array, x
initpatch       lda     ($48), y
                pla
                sta     scrn_array, x
                inx
                tya
                eor     #$80
                tay
                bmi     -
                iny
                bpl     -
                inc     $49
                dec     $4a
                bne     --
} ;swap_scrn = 1
                rts
} ;rwts_mode = 0

!if allow_sparse = 1 {
hddissparse
  !if rwts_mode = 0 {
                pla
  } ;rwts_mode = 0
-               sta     (adrlo), y
                inc     adrhi
                sta     (adrlo), y
                dec     adrhi
                iny
                bne     -
  !if rwts_mode = 0 {
                beq     hddresparse
  } else { ;rwts_mode = 1
skipblk         rts
  } ;rwts_mode = 0
} ;allow_sparse = 1
!if rwts_mode = 0 {
  !if aligned_read = 0 {
                ;cache partial block offset

+               pla
                sta     scratchlo
                pla
                sta     scratchhi
                pla
    !if one_shot = 0 {
                sta     sizehi
    } ;one_shot = 0

    !if enable_seek = 1 {
hddcopycache
                ldy     reqcmd
                ;cpy #cmdseek
                beq     ++
                tay
    } else { ;enable_seek = 0
                tay
hddcopycache
    } ;enable_seek = 1
                beq     +
                dey
-               lda     (adrlo), y
                sta     (scratchlo), y
                iny
                bne     -
                inc     scratchhi
                inc     adrhi
    !if read_scrn = 1 {
                bvs     copyhalf
    } ;read_scrn = 1
                bne     +
copyhalf
-               lda     (adrlo), y
                sta     (scratchlo), y
                iny
+               cpy     sizelo
                bne     -
    !if read_scrn = 1 {
                bvc     ++
                pla
                sta     sizelo
                pla
                sta     sizehi
                ldx     scratchhi
                inx
                stx     adrhi
                lda     scratchlo
                sta     adrlo
                bvs     resumescrn
    } ;read_scrn = 1
++
    !if one_shot = 0 {
      !if bounds_check = 1 {
                lda     bleftlo
                sec
                sbc     sizelo
                sta     bleftlo
                lda     blefthi
                sbc     sizehi
                sta     blefthi
      } ;bounds_check = 1
                clc
      !if enable_seek = 1 {
                lda     sizelo
      } else { ;enable_seek = 0
                tya
      } ;enable_seek = 1
                adc     blkofflo
                sta     blkofflo
                lda     sizehi
                adc     blkoffhi
                and     #$fd
                sta     blkoffhi
                bcc     hddrdwrdone ;always
    } else { ;one_shot = 1
      !if allow_aux = 1 {
                beq     hddrdwrdone
      } else { ;allow_aux = 0
                rts
      } ;allow_aux = 1
    } ;one_shot = 0
  } ;aligned_read = 0
} ;rwts_mode = 0

hddreaddirsel
!if ver_02 = 1 {
                ldy     #0
                sty     adrlo
} else { ;ver_02 = 0
                stz     adrlo
} ;ver_02 = 1

hddreaddirsec
!if allow_trees = 0 {
hddreaddirsect  ldy     #>hdddirbuf
} else { ;allow_trees = 1
                ldy     #>hdddirbuf
hddreaddirsect
} ;allow_trees = 0
                sty     adrhi
hddseekrd       ldy     #cmdread
!if ((rwts_mode or aligned_read) + enable_write) > 1 {
hddseekrdwr
} ;(rwts_mode = 1 or aligned_read = 1) and enable_write = 1
unrcommand3 = unrelochdd + (* - reloc)
                sty     command
!if use_smartport = 1 {
                nop ;allow replacing "sty command" with "sty pcommand" in extended SmartPort mode
} ;use_smartport = 1
!if (aligned_read and enable_write) = 0 {
hddseekrdwr
} ;aligned_read = 0 or enable_write = 0

unrbloklo1 = unrelochdd + (* - reloc)
                stx     bloklo
!if use_smartport = 1 {
                nop ;allow replacing "stx bloklo" with "stx pblock" in extended SmartPort mode
} ;use_smartport = 1
unrblokhi1 = unrelochdd + (* - reloc)
                sta     blokhi
!if use_smartport = 1 {
                nop ;allow replacing "sta blokhi" with "sta pblock + 1" in extended SmartPort mode
} ;use_smartport = 1
unrunit1 = unrelochdd + (* - reloc)
                lda     #$d1
                sta     unit
!if use_smartport = 1 {
                nop ;allow replacing "lda #$d1/sta unit" with "lda adrlo/sta paddr" in extended SmartPort mode
} ;use_smartport = 1
hddwriteimm     lda     adrhi ;for Trackstar support
                pha
!if use_smartport = 1 {
                sta     paddr + 1
} ;use_smartport = 1

unrentrysei = unrelochdd + (* - reloc)
!if no_interrupts = 1 {
                php
                sei
} ;no_interrupts = 1
unrentry = unrelochdd + (* - reloc)
                jsr     $d1d1
!if use_smartport = 1 {
unrpcommand = unrelochdd + (* - reloc)
pcommand        !byte   $2c ;hide packet in non-SmartPort mode
unrppacket = unrelochdd + (* - reloc)
                !word   unrelochdd + (packet - reloc)
} ;use_smartport = 1
!if no_interrupts = 1 {
                plp
} ;no_interrupts = 1
hackstar = unrelochdd + (* - reloc)
                pla
                sta     adrhi ;Trackstar does not preserve adrhi

!if (rwts_mode + (allow_sparse xor 1)) > 1 {
skipblk
} ;rwts_mode = 1 and allow_sparse = 0
knownrts        rts

!if use_smartport = 1 {
unrpacket = unrelochdd + (* - reloc)
packet          !byte   3
unrunit2 = unrelochdd + (* - reloc)
                !byte   0
paddr           !word   readbuff + $200
pblock          !byte   2, 0, 0
  !if >pcommand != >(pblock + 1) {
    !if >pcommand != >pblock {
      !ifdef pblock_enabled {
      } else {
        !ifdef PASS2 {
          !warn "uncomment ';;lda     #>pblock'"
          !warn "uncomment ';;pblock_enabled=1'"
          !warn "uncomment ';;lda     #>paddr'"
        }
      }
    } else {
      !ifdef pblock1_enabled {
      } else {
        !ifdef PASS2 {
          !warn "uncomment ';;lda     #>(pblock + 1)'"
          !warn "uncomment ';;pblock1_enabled=1'"
          !warn "uncomment ';;lda     #>paddr'"
        }
      }
    }
  }
} ;use_smartport = 1
!if (rwts_mode + allow_multi) > 1 {
vollist_b
!byte D1S1
vollist_e
} ;rwts_mode = 1 and allow_multi = 1
hddcodeend
!if swap_scrn = 1 {
scrn_array=$fb00
  !if swap_zp = 1 {
zp_array        = scrn_array + 64
hdddataend      = zp_array + 1 + last_zp - first_zp
  } else { ;swap_zp = 0
hdddataend      ;scrn_array + 64
  } ;swap_zp = 1
} else { ;swap_scrn = 0
  !if swap_zp = 1 {
zp_array
hdddataend      = zp_array + 1 + last_zp - first_zp
  } else { ;swap_zp = 0
hdddataend
  } ;swap_zp = 1
} ;swap_scrn = 1
