;license:MIT
;(c) 2024 by 4am
;

!ifndef _MACROS_ {

         !src  "../common/src/constants.a"

!macro LDADDR .addr {
         lda   #<.addr
         ldy   #>.addr
}

!macro STAY .addr {
         sta   .addr
         sty   .addr+1
}

; clobbers A
!macro STA_16 .addr, .value {
         lda   #<.value
         sta   .addr
         lda   #>.value
         sta   .addr+1
}

!macro MAKE_JSR .addr, .dest {
         lda   #$20
         sta   .addr
         +STA_16 .addr+1, .dest
}

; clobbers A
!macro MAKE_JMP .addr, .dest {
         lda   #$4C
         sta   .addr
         +STA_16 .addr+1, .dest
}

; use BIT to swallow the following 1-byte opcode
!macro   HIDE_NEXT_BYTE {
         !byte $24
}

; use BIT to swallow the following 2-byte opcode
!macro   HIDE_NEXT_2_BYTES {
         !byte $2C
}

; various language card configurations
!macro   READ_RAM1_NO_WRITE {
         sta   $C088
}

!macro   READ_RAM1_WRITE_RAM1 {
         bit   $C08B
         bit   $C08B
}

!macro   READ_RAM2_NO_WRITE {
         sta   $C080
}

!macro   READ_RAM2_WRITE_RAM2 {
         bit   $C083
         bit   $C083
}

!macro   READ_ROM_WRITE_RAM1 {
         bit   $C089
         bit   $C089
}

!macro   READ_ROM_WRITE_RAM2 {
         bit   $C081
         bit   $C081
}

!macro   READ_ROM_NO_WRITE {
         sta   $C082
}

; exits with Z=1 if machine can display lowercase
; A clobbered
!macro HAS_LOWERCASE {
         lda   ROM_MACHINEID
         cmp   #$A0                  ; Spectrum ED
         beq   +
         cmp   #$06                  ; Apple //e and later
+
}

; X=0, Z=1 on exit
; A clobbered
; Y preserved
!macro SHORT_COPY .start, .end, .target {
         ldx   #<(.end-.start)
-        lda   .start-1, x
         sta   .target-1, x
         dex
         bne   -
}

; X=0, Z=1 on exit
; A clobbered
; Y preserved
!macro PAGE_COPY .start, .target {
         ldx   #$00
-        lda   .start, x
         sta   .target, x
         dex
         bne   -
}

; does not expose MLI errors
; clobbers all registers/flags
!macro READ_ENTIRE_FILE .parm_open, .parm_read {
         jsr   PRODOS_MLI
         !byte CMD_OPEN
         !word .parm_open
         jsr   PRODOS_MLI
         !byte CMD_READ
         !word .parm_read
         jsr   CloseAllFiles
}

_MACROS_=*
}
