;license:MIT
;(c) 2024 by 4am
;
!cpu 6502
!to "build/LOADER.SYSTEM#FF2000",plain
*=$2000

; application-specific addresses
PRODOS_BUFFER             = $BB00    ; $400 bytes (also used by original game)
PREFIX_BUFFER             = $1A00    ; $40 bytes during init
STAGE2_CALLBACK           = $1A00    ; $100 bytes during initial game load
UTILS                     = $0110
INPUT                     = $0228    ; $100 bytes (if interactive, persistent)
AUTO_INPUT                = INPUT
AUTO_BUFFER               = $02F0    ; $100 bytes (if non-interactive, persistent)
WRAP_DRAWING              = INPUT+$100
AUTO_TEMP_BUFFER          = $BA00    ; $100 bytes, saved and restored

; application-specific flags
BETTER_INC_RANDOM         = 0

         !src  "../common/src/loader.init.a"               ; must be first
                                                           ; exits via Stage1
move_utils_start
!pseudopc UTILS {
         !src  "../common/src/shared.quit.a"
         !src  "../common/src/shared.closeallfiles.a"
         !src  "../common/src/shared.swapzp.a"
}
move_utils_end
AUTO_FILENAME = UTILS + move_utils_end - move_utils_start

         !src  "../common/src/loader.automateinput.blocking.a"
         !src  "../common/src/loader.betterinput.blocking.a"

move_wrap_drawing_start
!pseudopc WRAP_DRAWING {
         jsr   EnableAccelerator
         jsr   $895
DisableAccelerator
EnableAccelerator=*+3
}
move_wrap_drawing_end
         !src  "../common/src/hw.accel.a"

Stage1
         ldx   #$FF                  ; initialize stack pointer because we're
         txs                         ; going to copy stuff to page 1

         lda   #$60                  ; game bug: clock driver interferes
         sta   $BF06                 ; with game input by clobbering $200+

         +SHORT_COPY move_utils_start, move_utils_end, UTILS

         ; set up our custom reset vector (inside UTILS)
         +STA_16 $3F2, QuitToProDOS
         jsr   ROM_FINALIZE_RESET

         ; 1C00..1DAA
         +READ_ENTIRE_FILE parm_open1, parm_read1

         ; copy stage 2 callback into place
         +SHORT_COPY move_stage2_start, move_stage2_end, STAGE2_CALLBACK

         ; install hook to call stage 2 once game loads its assets
         +STA_16 $1CF3, STAGE2_CALLBACK

         lda   input_filename_start
         ; stage 2 (now in place) needs to know if we're using automation
         sta   HasAutomationFile
         beq   @no_auto

         ; if we're using automation, install the AutomateInput code
         ; (will install hook later, in stage 2)
         +INSTALL_AUTOMATE_INPUT
         jmp   @start_game

@no_auto
         +INSTALL_BETTER_INPUT
         +SHORT_COPY move_wrap_drawing_start, move_wrap_drawing_end, WRAP_DRAWING
         ; build EnableAccelerator and DisableAccelerator functions
         ; and copy them into place
         jsr   BuildAcceleratorFunction
         +STAY @accel+1
         dex
@accel   lda   SELF_MODIFIED_WORD, x
         sta   DisableAccelerator, x
         dex
         bpl   @accel
         +STA_16 $1C44, WRAP_DRAWING

@start_game
         jmp   (address_ptr)

parm_open1
         !byte 3
         !word obj_filename1
         !word PRODOS_BUFFER
         !byte 0
parm_read1
         !byte 4
         !byte 1
address_ptr
         !word $1C00
         !word $FFFF
         !word 0
obj_filename1
         !byte 6
         !text "LOADER"

move_stage2_start
!pseudopc STAGE2_CALLBACK {
HasAutomationFile=*+1
         lda   #SELF_MODIFIED_BYTE
         beq   @no_auto

         ; if we're using automation, install the AutomateInput hook
         +MAKE_JSR $442F, AutomateInput
         lda   #0
         sta   $4433

         ; don't pause after printing 4 lines
         lda   #$2C
         sta   $447C

         jmp   @start_game

@no_auto
         +MAKE_JSR $442F, BlockingBetterInput
         lda   #0
         sta   $4433
         +STA_16 $807, WRAP_DRAWING

@start_game
         jmp   $4000
}
move_stage2_end
