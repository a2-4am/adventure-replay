;license:MIT
;(c) 2024 by 4am
;
!cpu 6502
!to "build/LOADER.SYSTEM#FF2000",plain
*=$2000

; application-specific macros
!macro RWTS_FILENAMES {
side_b
         !byte 6
         !text "SIDE.B"
rwts_filenames
         !word side_b
}

; application-specific addresses
RESET_VECTOR              = $110     ; set by original game
PRODOS_BUFFER             = $B800    ; $400 bytes
STAGE2                    = $6100
PREFIX_BUFFER             = $BC00    ; $40 bytes during init
AUTO_BUFFER               = $BC00    ; $100 bytes (if non-interactive, persistent)
SAVEGAME                  = $BC00    ; max $100 bytes (if interactive, persistent)
RWTS                      = $BD00    ; max $100 bytes (persistent)
INPUT                     = $BE00    ; max $100 bytes (persistent)
AUTO_INPUT                = INPUT
AUTO_FILENAME             = $BEBF    ; $41 bytes (if non-interactive, persistent)
DALE_LOCATION_ARRAY       = $6C40

         !src  "../common/src/loader.init.a"               ; must be first
                                                           ; exits via Stage1
         !src  "../common/src/loader.rwts.dos.shim.a"
         !src  "../common/src/loader.automateinput.blocking.a"
         !src  "../common/src/loader.betterinput.blocking.a"
         !src  "../common/src/savegame.dale.a"

Stage1
         ; copy RWTS DOS shim into place
         +INSTALL_RWTS_DOS_SHIM

         ; copy reset code into place (game will set vector for us)
         ; note that QuitToProDOS is inside RWTS DOS shim (now in place)
         +SHORT_COPY QuitToProDOS, QuitToProDOS_end, RESET_VECTOR

         ; copy savegame code into place
         +INSTALL_DALE_SAVEGAME

         ; copy stage 2 & 3 code into place
         +SHORT_COPY move_stage2_start, move_stage3_end, STAGE2

         lda   input_filename_start
         ; stage 2 (now in place) needs to know if we're using automation
         sta   HasAutomationFile1
         beq   @no_auto
         +INSTALL_AUTOMATE_INPUT
         beq   @goto_stage2          ; always branches
@no_auto
         +INSTALL_BETTER_INPUT
@goto_stage2
         ; continue from relocated stage 2
         jmp   STAGE2

move_stage2_start
!pseudopc STAGE2 {
         ; 0800..6027
         +READ_ENTIRE_FILE parm_open1, parm_read1

HasAutomationFile1=*+1
         lda   #SELF_MODIFIED_BYTE
         bne   +                     ; if a filename was passed in, we'll
                                     ; use it for automation, so skip the
                                     ; title screen
         ; Reproduce title screen animation while waiting for keypress.
         ; This code originally at $07BA on original disk, now stored
         ; in OBJ file we just loaded, @ $6000
         jsr   $6000
+        bit   $c054
         bit   $c051

         ldx   #(move_stage3_end - move_stage3_start)
-        lda   move_stage3_start - move_stage2_start + STAGE2 - 1, x
         sta   Stage3-1, x
         dex
         bne   -
         lda   HasAutomationFile1
         ; stage 3 (now in place) needs to know if we're using automation
         sta   HasAutomationFile2
         ; continue from relocated stage 3
         jmp   Stage3

parm_open1
         !byte 3
         !word obj_filename1
         !word PRODOS_BUFFER
         !byte 0
parm_read1
         !byte 4
         !byte 1
         !word $0800
         !word $FFFF
         !word 0
obj_filename1
         !byte 8
         !text "OBJ.0800"
}

move_stage3_start
!pseudopc $2000 {
Stage3   ; copied up to $61xx then copied back down to $2000
         ; then finally executed from $2000

         ; 4000..B7FF
         +READ_ENTIRE_FILE parm_open2, parm_read2

; these changes have been made in the OBJ files directly
!if 0 {
         ; erase 'FLIP TO SIDE B' text
         ldx   #$13
         lda   #$F5
-        sta   $4FD8, x
         dex
         bpl   -

         ; disable unconditional keypress on quit
         lda   #$00
         sta   $1880

         ; normalize prompt
         lda   #$BE
         sta   $1705
         lda   #$A0
         sta   $1706

         ; increase save game slots
         lda   #$B9
         sta   $4C45
         lda   #$3A
         sta   $4C55
}

HasAutomationFile2=*+1
         lda   #SELF_MODIFIED_BYTE
         beq   @no_auto

         ; if we're using automation, install the AutomateInput hook
         +STA_16 $94E, AutomateInput
         ; and disable intro text screen
         lda   #$2C
         sta   $16C8
         sta   $16CB
         ; and disable output beeps
         sta   $161E
         sta   $1628
         sta   $4DA0
         bne   @start_game           ; always branches

@no_auto
         ; if we're not using automation, install the BetterInput hook instead
         +STA_16 $94E, BlockingBetterInput
         ; and hook savegame
         +MAKE_JSR $4C10, PrintSavedGames
         +MAKE_JSR $4C4D, ForceGraphics
         +MAKE_JMP $4C5A, SaveOrRestoreGame

@start_game
         jmp   $0800

parm_open2
         !byte 3
         !word obj_filename2
         !word PRODOS_BUFFER
         !byte 0
parm_read2
         !byte 4
         !byte 1
         !word $4000
         !word $FFFF
         !word 0
obj_filename2
         !byte 8
         !text "OBJ.4000"
}
move_stage3_end
move_stage2_end
