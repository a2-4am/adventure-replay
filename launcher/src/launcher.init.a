;license:MIT
;(c) 2024 by 4am
;
; first-run initialization code
;
; This file is included directly and is run from main memory when the
; .SYSTEM file is loaded
;

OneTimeInit
         ldx   #$FF
         txs
         +READ_ROM_NO_WRITE
         sta   ALTCHARSET            ; mousetext!
         sta   CLR80VID
         sta   STOREOFF
         sta   READMAINMEM
         sta   WRITEMAINMEM
         jsr   ROM_NORMAL
         jsr   ROM_TEXT
         jsr   ROM_HOME
         bit   MIXEDGFX
         bit   HIRES
         jsr   ROM_IN0
         jsr   ROM_PR0

         jsr   Has64K                ; check for 64K (required)
         bcc   @has64K
         ldy   #@no64Klen
-        lda   @s_no64K, y
         sta   $6B6, y
         dey
         bpl   -
@hang    bmi   @hang                 ; hangs forever
@s_no64K !scrxor $80,"REQUIRES 64K"
@no64Klen=(*-@s_no64K)-1
@has64K

         ; relocate program code
-        inc   FM+2
         inc   FMDEST+2
         lda   FM+2
         cmp   #>LastMover
         bcc   -
         ldx   #0
FM       lda   FirstMover, x
FMDEST   sta   RELOC, x
         inx
         bne   FM
         dec   FM+2
         dec   FMDEST+2
         lda   FMDEST+2
         cmp   #>RELOC
         bcs   FM

         ; populate build number
         lda   LoadingBuild
         ldx   LoadingBuild+1
         ldy   #$00
         jsr   PrintAsDecimal

         ; get machine configuration
         jsr   IsIIgs
         php
         ror   MachineStatus
         jsr   Has128K
         ror   MachineStatus
         plp
         bcc   @notGS
         jsr   SetGSColors
@notGS

         ; clear text page 2 with spaces
         ldx   #0
         lda   #$A0
-        sta   $800, x
         sta   $900, x
         sta   $A00, x
         sta   $B00, x
         inx
         bne   -

         ; accommodate uppercase-only machines (64K ][ and ][+ are supported)
         +HAS_LOWERCASE
         beq   @hasLower
         lda   #$DF
         sta   CharMask
         lda   #$AA                  ; asterisk
         sta   ClosedStar
         lda   #$AE                  ; period
         sta   OpenStar
@hasLower

         ; restore previous Bye program if ours is already installed and we moved
         ; a previous Bye program on a previous launch
         +READ_RAM2_WRITE_RAM2
         ldx   #$0b
-        lda   $d100, x              ; check if our Bye program is already installed
         cmp   move_bye_start, x
         bne   @noBye
         dex
         bpl   -
         ; our Bye program is already installed, so uninstall it and
         ; reinstall the previous Bye program, if any
         lda   $d400
         cmp   #$d8                  ; CLD opcode
         beq   +
         lda   #$00
         sta   $d100
         beq   @noBye
+        lda   #$d4                  ; restore previous Bye from $D400..$D6FF
         sta   input+1
         lda   #$d1
         sta   output+1
         ldy   #$00
         sty   input
         sty   output
         ldx   #$03
-        lda   (input), y
         sta   (output), y
         iny
         bne   -
         inc   input+1
         inc   output+1
         dex
         bne   -
@noBye

         +READ_ROM_NO_WRITE
         +LDADDR QuitToProDOS
         +STAY $3F2
         jsr   ROM_FINALIZE_RESET
         jmp   Start                 ; continue from relocated program code

LoadingBuild
         !word BUILDNUMBER

PrintAsDecimal
         jsr   $FF4A
         ldy   #$02
--       lda   #$00
         ldx   #$18
-        cmp   #$05
         bcc   +
         sbc   #$85
         sec
+        rol   $45
         rol   $46
         rol   $47
         rol
         dex
         bne   -
         and   #$0F
         ora   #$B0
         sta   txtBuild, y
         dey
         bpl   --
         rts

         !source "src/hw.memcheck.a"
         !source "src/hw.iigs.a"
