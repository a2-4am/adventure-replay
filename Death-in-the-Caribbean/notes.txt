FIXED: after dying (e.g. KICK BULL), game prompts to restart
the adventure then drops to monitor

-=-=-

multi-disk:

Good: game boots DOS 3.3 but only uses it to load one
initial file, then uses raw RWTS calls thereafter.

Bad: game checks disk volume ($B7F6) after every sector
read to determine if it's on the correct side of the disk.
Side A is $FE (default), side B is $DE.

$702D contains the expected volume number. Initially $FE
but changed explicitly at $7617 (LDA #$DE / STA $702D)
when you get to the point in the game where you need to
flip the disk (crossing the river). NB this range of
memory changes by location. There may be other location-
specific code that changes it too.

Also unconditionally set to value of $B7F6 at $1E6D (??)

Also toggled (LDA / EOR #$20 / STA) at $41D7 (??)

Also reset (LDA #$FE / STA) at $746E (called after you
die and restart)

$B7EB is always set to $00 so a generic RWTS shim would
not have enough information to know what the expected
disk volume should be. It would need to look at the
(game-specific) address $702D.

Could potentially head-patch a generic RWTS shim to
look at $702D, unconditionally set $B7F6 to match, then
change the filename of the disk image based on the value...
before every sector read. The disk image file is reopened
on every sector read so it should work. The caller would
think it always read from the correct disk (which would be
true, in a way) and would never prompt to flip the disk.

-=-=-

shenanigans:

Apropos of nothing, at $4110 it calls $5256 with
A=$00 and Y=$60, which (successfully) reads a sector
directly into zero page $60 and continuing into the
bottom of the stack. This will not work under ProDOS,
which (quite sensibly) refuses to read into anything
directly into zero page.

Also $4110 is executed again after you die in-game,
so any solution needs to be persistent.

-=-=-

input:

$1963 stores #$BC in zero page $33 then calls $FD6A which
acts prints the prompt (#$BC = "<") and handles an entire
line of input and stores it at $200+ with hi bits on.
So we need a handle-entire-line-of-input routine.

  (display prompt)
reset
  ldx #$00
loop
  jsr BlockingBetterInput
  cmp #$88
  bne commit
  dex
  bmi reset
  dec CH
  bne loop
commit
  sta $200,x
  inx
  cmp #$8d
  bne loop

-=-=-

de-random:

Ghost will randomly steal random inventory items and
store them in the graveyard. Logic for this starts
at $1E76 to see if you've been to the graveyard yet
and whether you have the amulet yet (which prevents
it) and some other conditions. There is also a
random condition that checks zero page $4E to see
if it's less than #$19. So we can either ensure
that's always true, or we can change the branch
after so it just returns ($1E92: 01 -> 00).
Naturally this code is clobbered by a sector read
during game initialization (what isn't?) so some
persistent re-patcher will be required.

-=-=-

save/restore:

Looks like save and restore share most of the code,
with a different entry point that sets the RWTS
operation (1=read,2=write) at $B7F4.

$1CC5 restore game
$1CCA save game

prompts to insert save disk and press 1-9 for save slot
(should shorten this to just the standard prompt, no
mention of disks of course)

$1D04 calls a routine at $5342 that normalizes the RWTS
$1D51 calls the same routine again to swap it back
(shouldn't do either of these)

saves to track=save-slot, sectors 0 and 1

first sector is $100 bytes starting at $403C
second sector is $100 bytes starting at $7000 after
copying part of zero page into $7030

afterwards there is a prompt to re-insert the
adventure disk, which we should also skip
(there are separate prompts for save and restore)

note save command is "SAVE" not "SAVE GAME"
and restore command is "LOAD" not anything else
