;license:MIT
;(c) 2024 by 4am
;
!cpu 6502
!to "build/LOADER.SYSTEM#FF2000",plain
*=$2000

; application-specific macros
!macro RWTS_FILENAMES {
side_a
         !byte 6
         !text "SIDE."
image_filename_suffix
         !text "A"
rwts_filenames
         !word side_a
}

; application-specific addresses
PRODOS_BUFFER             = $B800    ; $400 bytes
PREFIX_BUFFER             = $BC00    ; $40 bytes
AUTO_BUFFER               = $BC00    ; $100 bytes (if non-interactive, persistent)
SAVEGAME                  = $BC00    ; max $100 bytes (if interactive, persistent)
RWTS_VOL_PATCH            = $BD00
RWTS                      = $BD14    ; max $100 bytes (persistent)
INPUT                     = $BE00    ; max $100 bytes (persistent)
AUTO_INPUT                = INPUT
AUTO_FILENAME             = $BEBF    ; $41 bytes (if non-interactive, persistent)
SAVE_INPUT_BUFFER         = $0228    ; $26 bytes (persistent, used by BetterLineInput)

         !src  "../common/src/loader.init.a"               ; must be first
                                                           ; exits via Stage1
         !src  "../common/src/loader.rwts.dos.shim.a"
         !src  "../common/src/loader.automateinput.line.a"
         !src  "../common/src/loader.betterinput.line.a"
move_rwts_vol_patch_start
!pseudopc RWTS_VOL_PATCH {
         pha
         lda   $702D                 ; game keeps expected disk volume here
         sta   $B7F6
         cmp   #$FE
         bne   +
         lda   #"A"                  ; $FE -> read from side A
         !byte $2C
+        lda   #"B"                  ; $DE -> read from side B
         sta   image_filename_suffix
         pla
}
move_rwts_vol_patch_end

move_rwts_get_addr_start
         lda   #$B7
         ldy   #$E8
         rts
move_rwts_get_addr_end

Stage1
         ; copy RWTS DOS shim into place
         ; (includes CloseAllFiles routine, so must do this first)
         +INSTALL_RWTS_DOS_SHIM
         ; and set up redirect for DOS calls
         +MAKE_JMP $3D9, RWTS
         +SHORT_COPY move_rwts_get_addr_start, move_rwts_get_addr_end, $3E3
         +SHORT_COPY move_rwts_vol_patch_start, move_rwts_vol_patch_end, RWTS_VOL_PATCH

         ; SIDE.A includes a patch at $4110 to call $9BF0 (custom code in
         ; next file) instead of $5256 (sector read) to copy code into $0060.
         ; You might think that this patch should be included in the file
         ; loaded at $4000, but you would be mistaken, because $4110
         ; is clobbered by the previous sector read at $4107.

         ; 4000..71FF
         +READ_ENTIRE_FILE parm_open1, parm_read1

         ; 9BE0..B7FF
         +READ_ENTIRE_FILE parm_open2, parm_read2

         lda   input_filename_start
         beq   @no_auto
         ; if we're using automation, install the AutomateLineInput hook
         +INSTALL_AUTOMATE_LINE_INPUT
         ; object files are already patched to call this (see notes below)

         ; activate patch that prevents ghost from randomly stealing
         ; items from your inventory
         lda   #$8C
         sta   $9BFB

         ; SIDE.B contains patch at $765A to jump to custom code @ $9BEA
         ; that waits for a key before jumping to the reset vector
         ; (original game would just hang in an infinite loop which
         ; messed up the automation)

         jmp   @start_game

@no_auto
         ; if we're not using automation, install the BetterLineInput hook instead
         +INSTALL_BETTER_LINE_INPUT
         ; object files are already patched to call this
         ; - SIDE.A contains patch at $1963 to call custom code @ $96E0
         ;   to draw our standard input prompt ('> ')
         ; - SIDE.A contains patch at $1967 to call BetterLineInput @ $BE00
         +STA_16 $1CD9, BetterLineInput

         ; and copy savegame routines into place
         ; SIDE.A includes patches to call them
         ; $1CD8:         JSR $BE00 to hook input for slot selection
         ; $1C0B:         JSR $BC00 to call SaveOrRestorePart1
         ; $1D04:         BIT       to bypass RWTS swapper
         ; $1D48:         JSR $BC03 to call SaveOrRestorePart2
         ; $1D51:         BIT       to bypass RWTS swapper
         +SHORT_COPY move_savegame_start, move_savegame_end, SAVEGAME

@start_game
         jmp   $4000

parm_open1
         !byte 3
         !word obj_filename1
         !word PRODOS_BUFFER
         !byte 0
parm_read1
         !byte 4
         !byte 1
         !word $4000
         !word $FFFF
         !word 0
obj_filename1
         !byte 8
         !text "OBJ.4000"

parm_open2
         !byte 3
         !word obj_filename2
         !word PRODOS_BUFFER
         !byte 0
parm_read2
         !byte 4
         !byte 1
         !word $9BE0
         !word $FFFF
         !word 0
obj_filename2
         !byte 8
         !text "OBJ.9BE0"

move_savegame_start
!pseudopc SAVEGAME {
         jmp   SaveOrRestorePart1    ; BC00
         jmp   SaveOrRestorePart2    ; BC03
PrintSavedGames                      ; BC06
         brk                         ;TODO

SaveOrRestorePart1
; in:    $B7EC = selected save slot
;        $B7F4 = 1 for restore, 2 for save
;        ($B7F0) -> $100-byte buffer
; out:   C=0 if success
;        C=1 if failure
;        caller does not check error code in RWTS parameter table
         jsr   set_save_addr_internal
         lda   $B7EC
         ora   #$30
         sta   save_slot_ascii
         lda   $B7F4
         lsr
         ora   #CMD_READ
         sta   save_op
         jsr   PRODOS_MLI
         !byte CMD_OPEN
         !word save_open
         bcs   save_error
         jsr   read_or_write_internal
         bcs   save_error
         rts
save_error
         jsr   CloseAllFiles
         sec
         rts

SaveOrRestorePart2
; in:    SaveOrRestorePart1 was called and returned with C=0
;        so all MLI parameters have been filled in, save file
;        is still open, and its file position is $100
; out:   C=0 if success
;        C=1 if failure
;        caller does not check error code in RWTS parameter table
;        save file is closed either way
         jsr   set_save_addr_internal
         jsr   read_or_write_internal
         php
         jsr   CloseAllFiles
         plp
         rts

set_save_addr_internal
         lda   $B7F0
         sta   save_read_addr_lo
         lda   $B7F1
         sta   save_read_addr_hi
         rts

read_or_write_internal
         jsr   PRODOS_MLI
save_op  !byte SELF_MODIFIED_BYTE
         !word save_read
         bcs   @error
         lda   save_read_actual_lo
         bne   @error
         lda   save_read_actual_hi
         cmp   #$01
         bne   @error
         clc
         rts
@error   sec
         rts

save_open
         !byte 3
         !word save_filename
         !word PRODOS_BUFFER
         !byte 0
save_read
         !byte 4
         !byte 1
save_read_addr_lo
         !byte SELF_MODIFIED_BYTE
save_read_addr_hi
         !byte SELF_MODIFIED_BYTE
;save_read_len
         !word $0100                 ; called twice, $100 bytes each
save_read_actual_lo
         !byte SELF_MODIFIED_BYTE
save_read_actual_hi
         !byte SELF_MODIFIED_BYTE
save_filename
         !byte 6
         !text "SAVE."
save_slot_ascii
         !text "0"                   ; self-modified
}
move_savegame_end
